/* Coding Assignment 4 */
//Sho Reagan 1001925250
#include <stdlib.h> 
#include <stdio.h> 
#include <string.h>
#include <time.h>
#include <ctype.h>

void merge(int arr[], int left, int middle, int right);
void swap(int *SwapA, int *SwapB);
int partition (int A[], int low, int high);

typedef struct node
{
	int number;
	struct node *next_ptr;
}
NODE;

void quickSort(int A[], int low, int high)
{
	if(low < high)
	{
		int ndx = partition(A, low, high);

		quickSort(A, low, ndx - 1);
		quickSort(A, ndx + 1, high);
	}
}

int partition (int A[], int low, int high) 
{ 
	int i, j = 0;
	
	#if QSM 
		int middle = (high+low)/2; 
		swap(&A[middle], &A[high]); 
	#elif QSRND 
		int random = (rand() % (high-low+1)) + low;  
		swap(&A[random], &A[high]); 
	#endif 
	int pivot = A[high];

	i = (low - 1); 
	for (j = low; j < high; j++) 
	{ 
		if (A[j] < pivot) 
		{ 
			i++; 
			swap(&A[i], &A[j]); 
		} 
	} 
	swap(&A[i + 1], &A[high]); 
	return (i + 1); 
}

void swap(int *SwapA, int *SwapB) 
{ 
	int temp = *SwapA; 
	*SwapA = *SwapB; 
	*SwapB = temp; 
} 

void mergeSort(int arr[], int L, int R)
{
	if(L < R)
	{
		int M = (L + R) / 2;
		mergeSort(arr, L, M);
		mergeSort(arr, M+1, R);
		merge(arr, L, M, R);
	}
}

void merge(int arr[], int left, int middle, int right)
{
	int i, j, k;
	int n1 = middle - left + 1;
	int n2 = right - middle;

	int L[n1], R[n2];

	for(i = 0; i < n1; i++)
		L[i] = arr[left + i];
	for(j = 0; j < n2; j++)
		R[j] = arr[middle + 1 + j];

	i = 0;
	j = 0;
	k = left;

	while(i < n1 && j < n2)
	{
		if(L[i] <= R[j])
		{
			arr[k] = L[i];
			i++;
		}
		else
		{
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	while(i < n1)
	{
		arr[k] = L[i];
		i++;
		k++;
	}

	while(j < n2)
	{
		arr[k] = R[j];
		j++;
		k++;
	}
}

int ReadFileIntoArr(int argc, char *argv[], int **arr)
{
	FILE *fp;
	char buffer[10];
	int counter = 0;

	if(argc == 1) 
	{
		printf("File must be provided on command line...exiting\n");
		exit(0);
	}
	else
	{
		fp = fopen(argv[1], "r");
		if(fp == NULL)
		{
			printf("Invalid file name\n");
			exit(0);
		}
	}

	while(fgets(buffer, 10, fp) != NULL)
	{
		counter++;
	}
	
	fseek(fp, 0, SEEK_SET);
	*arr = malloc(counter * sizeof(int));


	int i;
	for(i = 0; i < counter; i++)
	{
		fgets(buffer, 10, fp);
		(*arr)[i] = atoi(buffer);
	}

	return counter;
}

void PrintArray(int arr[], int size)
{
	int i;
	for(i = 0; i < size; i++)
	{
		printf("%d\n", arr[i]);
	}
}

int main(int argc, char *argv[]) 
{ 
	int *arr = NULL;
	clock_t quickStart, quickEnd;
	long sum = 0;
	int n;

	if(argc != 3)
	{
		printf("Number of runs not specified on command line...defaulting to 10");
		n = 10;
	}
	else if(atoi(argv[2]));
	{
		n = atoi(argv[2]);
	}


	int i;
	for(i = 1; i <= n; i++)
	{
		int size = ReadFileIntoArr(argc, argv, &arr);
		#ifdef PRINTARRAY
			printf("Unsorted Array\n");
			PrintArray(arr, size);
			printf("\n");
		#endif
		
		quickStart = clock();
		quickSort(arr, 0, size-1);
		quickEnd = clock();
		sum += quickEnd - quickStart;

		//printf("Run %d complete: %ld tics\n", i, quickEnd - quickStart);

		#ifdef PRINTARRAY
			PrintArray(arr, size);
			printf("\n");
		#endif

		free(arr);

		if(i == n)
		{
			printf("Processed %d records\n", size);
			printf("The average run time for %d runs is %ld\n", n, sum / n);
		}
	}
	
	return 0; 
} 
